import sqlite3
import logging
import asyncio
import configparser
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta, time

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
config = configparser.ConfigParser()
config.read('config.ini')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.ini
TOKEN = config.get('Telegram', 'token')
ADMIN_IDS = set(map(int, config.get('Telegram', 'admin_ids').split(',')))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("reports.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    user_name TEXT
)
""")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã reports –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
cursor.execute("""
CREATE TABLE IF NOT EXISTS reports (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    completed_task TEXT,
    next_task TEXT,
    timestamp TEXT,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
""")
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RegistrationState(StatesGroup):
    name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

class ReportState(StatesGroup):
    completed_task = State()
    next_task = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç")],
        [KeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç—ã")]
    ], resize_keyboard=True)
    return keyboard

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_user_registered(user_id):
    cursor.execute("SELECT user_name FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result is not None and result[0] is not None

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if is_user_registered(user_id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=get_main_keyboard())
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.set_state(RegistrationState.name)

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(RegistrationState.name)
async def get_user_name(message: Message, state: FSMContext):
    user_name = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
    cursor.execute("INSERT OR REPLACE INTO users (user_id, user_name) VALUES (?, ?)", (user_id, user_name))
    conn.commit()

    await message.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ, {user_name}! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_keyboard())
    await state.clear()

# –ù–∞—á–∞–ª–æ –æ—Ç—á—ë—Ç–∞
@dp.message(lambda message: message.text == "üìù –ù–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç")
async def start_report(message: Message, state: FSMContext):
    await message.answer("üìå –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ReportState.completed_task)

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
@dp.message(ReportState.completed_task)
async def get_completed_task(message: Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")  # –õ–æ–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(completed_task=message.text)
    await message.answer("üìÖ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —á–µ–º —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–Ω—è—Ç—å—Å—è.")
    await state.set_state(ReportState.next_task)

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é —Ä–∞–±–æ—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
@dp.message(ReportState.next_task)
async def get_next_task(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = cursor.execute("SELECT user_name FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]
    data = await state.get_data()
    completed_task = data["completed_task"]
    next_task = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (UTC+6)
    local_time = datetime.now() + timedelta(hours=6)
    timestamp = local_time.strftime("%Y-%m-%d %H:%M:%S")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É reports
    cursor.execute("""INSERT INTO reports (user_id, completed_task, next_task, timestamp)
                  VALUES (?, ?, ?, ?)""",
               (user_id, completed_task, next_task, timestamp))
    conn.commit()

    await message.answer("‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_main_keyboard())
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(lambda message: message.text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç—ã")
async def view_reports(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤.", reply_markup=get_main_keyboard())
        return
    
    cursor.execute("""
        SELECT users.user_name, reports.completed_task, reports.next_task, reports.timestamp
        FROM reports
        JOIN users ON reports.user_id = users.user_id
        ORDER BY reports.timestamp DESC
    """)
    reports = cursor.fetchall()
    if not reports:
        await message.answer("üì≠ –û—Ç—á—ë—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=get_main_keyboard())
        return

    response = "üìú –û—Ç—á—ë—Ç—ã:\n\n" + "\n\n".join(
        [f"üë§ {r[0]}\nüïí {r[3]}\n‚úÖ {r[1]}\n‚è≠ {r[2]}" for r in reports]
    )
    await message.answer(response, reply_markup=get_main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def send_reports_to_admins():
    cursor.execute("""
        SELECT users.user_name, reports.completed_task, reports.next_task, reports.timestamp
        FROM reports
        JOIN users ON reports.user_id = users.user_id
        ORDER BY reports.timestamp DESC
    """)
    reports = cursor.fetchall()
    if not reports:
        return

    response = "üìú –û—Ç—á—ë—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n\n".join(
        [f"üë§ {r[0]}\nüïí {r[3]}\n‚úÖ {r[1]}\n‚è≠ {r[2]}" for r in reports]
    )

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, response)

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤
def schedule_reports():
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 9:00 –∫–∞–∂–¥—ã–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å
    scheduler.add_job(send_reports_to_admins, 'cron', day_of_week='mon-fri', hour=9, minute=0)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 17:30 –∫–∞–∂–¥—ã–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å
    scheduler.add_job(send_reports_to_admins, 'cron', day_of_week='mon-fri', hour=17, minute=30)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    schedule_reports()  # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())